name: Deploy to AWS S3 + CloudFront

on:
  push:
    branches:
      - main # main 브랜치에 push될 때만 배포
  pull_request:
    branches:
      - main # main 브랜치로 PR될 때만 빌드 테스트

env:
  NODE_VERSION: "18"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # - name: Run linting
      #   run: npm run lint

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: out/
          retention-days: 1
        # PR인 경우 배포하지 않으므로 아티팩트 업로드 건너뛰기
        if: github.event_name == 'push'

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    # main 브랜치에 push된 경우에만 배포 (PR 제외)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: out/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Production)
        run: |
          # 일반 파일 업로드 (JS, CSS, 이미지 등)
          aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME_PRODUCTION }} --delete --cache-control max-age=31536000,public --exclude "*.html"

          # HTML 파일 업로드 (Content-Type 명시)
          aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME_PRODUCTION }} --content-type "text/html" --exclude "*" --include "*.html" --cache-control max-age=0,no-cache,no-store,must-revalidate --metadata-directive REPLACE

      - name: Invalidate CloudFront (Production)
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} --paths "/*"

      - name: Notify deployment success
        if: success()
        run: |
          echo " Production deployment successful"
          echo "URL: https://${{ secrets.PRODUCTION_DOMAIN }}"
